package com.calendaridex.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.calendaridex.database.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "event_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property StartDate = new Property(2, java.util.Date.class, "startDate", false, "start_date");
        public final static Property EndDate = new Property(3, java.util.Date.class, "endDate", false, "end_date");
        public final static Property AdminEvent = new Property(4, boolean.class, "adminEvent", false, "admin_event");
        public final static Property AlarmTime = new Property(5, String.class, "alarmTime", false, "alarm_time");
        public final static Property AlarmRepeatPosition = new Property(6, int.class, "alarmRepeatPosition", false, "alarm_repeat_position");
    };


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT' (" + //
                "'event_id' INTEGER PRIMARY KEY ," + // 0: id
                "'title' TEXT," + // 1: title
                "'start_date' INTEGER," + // 2: startDate
                "'end_date' INTEGER," + // 3: endDate
                "'admin_event' INTEGER NOT NULL ," + // 4: adminEvent
                "'alarm_time' TEXT," + // 5: alarmTime
                "'alarm_repeat_position' INTEGER NOT NULL );"); // 6: alarmRepeatPosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
        stmt.bindLong(5, entity.getAdminEvent() ? 1l: 0l);
 
        String alarmTime = entity.getAlarmTime();
        if (alarmTime != null) {
            stmt.bindString(6, alarmTime);
        }
        stmt.bindLong(7, entity.getAlarmRepeatPosition());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // startDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // endDate
            cursor.getShort(offset + 4) != 0, // adminEvent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // alarmTime
            cursor.getInt(offset + 6) // alarmRepeatPosition
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setAdminEvent(cursor.getShort(offset + 4) != 0);
        entity.setAlarmTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlarmRepeatPosition(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
